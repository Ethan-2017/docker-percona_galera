#!/bin/bash
#
# This script is designed to be run inside the container
#

# fail hard and fast even on pipelines
set -eo pipefail

# set debug based on envvar
[[ $DEBUG ]] && set -x

DIR=$(dirname $0)

# functions
. $DIR/functions

DB_OPTIONS=""
MYSQL_USER=${MYSQL_USER:-admin}
MYSQL_PASS=${MYSQL_PASS:-admin}
REP_USER=${REP_USER:-replicator}
REP_PASS=${REP_PASS:-replicator}
PUBLISH=${PUBLISH:-3306}
PORT=${PUBLISH:-3306}
PROTO=${PROTO:-tcp}
ETCD_HOST=${ETCD_HOST:-$HOST}

rm /var/log/mysql/error.log
ln -s /dev/stdout /var/log/mysql/error.log

if [[ -z $HOST ]]; then
  echo '==> $HOST not set.  booting mysql without clustering.'
  init_database
  echo "==> database running..."
  mysqld_safe $DB_OPTIONS
  exit $?
fi

configure_etcd

etcd_set_default engine percona
etcd_set_default credentials/adminUser ${MYSQL_USER}
etcd_set_default credentials/adminPass ${MYSQL_PASS}
etcd_set_default credentials/repUser ${REP_USER}
etcd_set_default credentials/repPass ${REP_PASS}
etcd_set_default host $HOST
etcd_set_default port $PORT

if [[ -n $CLUSTER ]]; then
  etcd_set_default cluster/name ${CLUSTER}
  etcd_make_directory cluster/mysqlNodes
  etcd_make_directory cluster/galeraEndpoints
fi

# wait for confd to run once and install initial templates
until confd -onetime -node $ETCD -config-file /app/confd.toml; do
  echo "echo ==> database: waiting for confd to write initial templates..."
  sleep $(($ETCD_TTL/2))  # sleep for half the TTL
done

# initialize data volume
init_database

WSREP_OPTIONS="--wsrep_node_address=$HOST $DB_OPTIONS"
cluster_members

echo Starting MySQL for reals

if [[ -z $CLUSTER_MEMBERS ]]; then
  if [[ -n $BOOTSTRAP ]]; then
    mysqld_safe --wsrep-new-cluster $WSREP_OPTIONS &
  else
    echo -n "-----> Waiting for primary."
    until [[ ! -z $CLUSTER_MEMBERS ]]; do
      cluster_members
      echo -n "."
      sleep 10
    done
    echo "-----> leader ready.  Starting."
    sleep 5
    echo "-----> joining cluster with known members: $CLUSTER_MEMBERS"
    mysqld --wsrep_cluster_address=gcomm://$CLUSTER_MEMBERS $WSREP_OPTIONS &
  fi
else
  cluster_members
  echo "-----> joining cluster with known members: $CLUSTER_MEMBERS"
  mysqld --wsrep_cluster_address=gcomm://$CLUSTER_MEMBERS $WSREP_OPTIONS &
fi

SERVICE_PID=$!

echo $SERVICE_PID > /app/database.pid

# smart shutdown on SIGINT and SIGTERM
trap on_exit INT TERM

# spawn confd in the background to update services based on etcd changes
confd -node $ETCD -config-file /app/confd.toml &
CONFD_PID=$!

# wait for the service to become available
echo "==> sleeping for 5 seconds, then testing if DB is up."
sleep 5
while [[ -z $(netstat -lnt | awk "\$6 == \"LISTEN\" && \$4 ~ \".$PUBLISH\" && \$1 ~ \"$PROTO.?\"") ]] ; do sleep 1; done

echo "==> database running..."

# publish the service to etcd using the injected HOST and PORT
if [[ -n $PUBLISH ]]; then
  set +e
  # wait for the service to become available on PUBLISH port
  sleep 1 && while [[ -z $(netstat -lnt | awk "\$6 == \"LISTEN\" && \$4 ~ \".$PUBLISH\" && \$1 ~ \"$PROTO.?\"") ]] ; do sleep 1; done

  # while the port is listening, publish to etcd
  while [[ ! -z $(netstat -lnt | awk "\$6 == \"LISTEN\" && \$4 ~ \".$PUBLISH\" && \$1 ~ \"$PROTO.?\"") ]] ; do
    publish_to_etcd
    sleep $(($ETCD_TTL/2)) # sleep for half the TTL
  done

  # if the loop quits, something went wrong
  exit 1

fi

wait
